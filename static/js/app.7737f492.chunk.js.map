{"version":3,"sources":["assets/images/index.ts","components/HomeScrollView.tsx","screens/Home.tsx","navigation/RootNavigator.tsx","navigation/index.tsx","App.tsx","assets/images/cover.jpeg","assets/images/avatar.jpg"],"names":["IMAGES","cover","require","avatar","AnimatedBlurView","Animated","createAnimatedComponent","BlurView","HomeScrollView","memo","children","props","colorMode","useColorMode","insets","useSafeAreaInsets","backgroundColor","useColorModeValue","translationY","useSharedValue","scrollHandler","useAnimatedScrollHandler","event","value","contentOffset","y","useMemo","headerHeight","top","smallHeaderHeight","headerStyle","useAnimatedStyle","height","interpolate","HEADER_HEIGHT","extrapolateRight","Extrapolation","CLAMP","avatarStyle","size","extrapolateLeft","width","marginTop","AVATAR_SIZE","blurViewProps","useAnimatedProps","intensity","Platform","OS","HEADER_OFFSET","headerContentStyle","opacity","transform","translateY","headerOverlayStyle","View","style","styles","header","alt","source","flex","resizeMode","headerOverlay","blurView","paddingTop","tint","undefined","animatedProps","flexDirection","alignItems","ml","textAlign","fontWeight","fontSize","ScrollView","onScroll","scrollEventThrottle","scrollView","contentContainerStyle","Image","borderColor","StyleSheet","create","absoluteFillObject","justifyContent","overflow","position","left","right","zIndex","borderRadius","borderWidth","HomeScreen","toggleColorMode","data","icon","description","t","link","Box","maxW","alignSelf","scrollViewContent","Text","color","mt","flexWrap","space","map","item","Icon","as","Feather","name","Fab","onPress","paddingHorizontal","RootStack","createNativeStackNavigator","RootNavigator","Navigator","screenOptions","headerShown","Screen","component","Navigation","NavigationContainer","theme","DefaultTheme","DarkTheme","i18n","translations","en","fr","locale","Localization","substring","fallbacks","colorModeManager","get","a","async","AsyncStorage","getItem","val","set","setItem","console","log","config","strictMode","App","useState","isReady","setIsReady","loadAssets","useCallback","cacheImages","Object","values","image","Asset","fromModule","downloadAsync","Promise","all","NativeBaseProvider","startAsync","onFinish","onError","warn","module","exports"],"mappings":"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","file":"static/js/app.7737f492.chunk.js","sourcesContent":["export const IMAGES = {\n  cover: require('./cover.jpeg'),\n  avatar: require('./avatar.jpg'),\n}\n","import { Avatar, Box, Image, Text, useColorMode, useColorModeValue } from 'native-base'\nimport { memo, useMemo } from 'react'\nimport { ScrollViewProps, StyleSheet, Platform } from 'react-native'\nimport Animated, {\n  Extrapolation,\n  interpolate,\n  useAnimatedProps,\n  useAnimatedScrollHandler,\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated'\nimport { BlurView, BlurViewProps } from 'expo-blur'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nimport { IMAGES } from '~/assets'\n\nexport type HomeScrollViewProps = ScrollViewProps\n\nconst HEADER_HEIGHT = 180\nconst HEADER_HEIGHT_SMALL = 80\nconst AVATAR_SIZE = 120\nconst AVATAR_SIZE_SMALL = 80\n\nconst HEADER_OFFSET = HEADER_HEIGHT - HEADER_HEIGHT_SMALL\nconst AVATAR_OFFSET = AVATAR_SIZE - AVATAR_SIZE_SMALL\n\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView)\n\nexport const HomeScrollView = memo<HomeScrollViewProps>(({ children, ...props }) => {\n  const { colorMode } = useColorMode()\n  const insets = useSafeAreaInsets()\n  const backgroundColor = useColorModeValue('white', 'black')\n  const translationY = useSharedValue(0)\n\n  const scrollHandler = useAnimatedScrollHandler((event) => {\n    translationY.value = event.contentOffset.y\n  })\n\n  const { headerHeight, smallHeaderHeight } = useMemo(\n    () => ({\n      headerHeight: HEADER_HEIGHT + insets.top,\n      smallHeaderHeight: HEADER_HEIGHT_SMALL + insets.top,\n    }),\n    [insets.top]\n  )\n\n  const headerStyle = useAnimatedStyle(() => {\n    return {\n      height: interpolate(\n        translationY.value,\n        [0, HEADER_OFFSET],\n        [headerHeight, smallHeaderHeight],\n        { extrapolateRight: Extrapolation.CLAMP }\n      ),\n    }\n  })\n\n  const avatarStyle = useAnimatedStyle(() => {\n    const size = interpolate(\n      translationY.value,\n      [0, HEADER_OFFSET],\n      [AVATAR_SIZE, AVATAR_SIZE_SMALL],\n      { extrapolateRight: Extrapolation.CLAMP, extrapolateLeft: Extrapolation.CLAMP }\n    )\n    return {\n      height: size,\n      width: size,\n      marginTop: interpolate(translationY.value, [0, HEADER_OFFSET], [0, AVATAR_OFFSET], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.CLAMP,\n      }),\n    }\n  })\n\n  const blurViewProps = useAnimatedProps<BlurViewProps>(() => {\n    return {\n      intensity:\n        Platform.OS === 'web'\n          ? 0\n          : interpolate(\n              translationY.value,\n              [HEADER_OFFSET + AVATAR_SIZE_SMALL, HEADER_OFFSET + AVATAR_SIZE_SMALL + 20],\n              [0, 50],\n              { extrapolateLeft: Extrapolation.CLAMP, extrapolateRight: Extrapolation.CLAMP }\n            ),\n    }\n  })\n\n  const headerContentStyle = useAnimatedStyle(() => {\n    return {\n      opacity: interpolate(\n        translationY.value,\n        [HEADER_OFFSET + AVATAR_SIZE_SMALL, HEADER_OFFSET + AVATAR_SIZE_SMALL + 20],\n        [0, 1]\n      ),\n      transform: [\n        {\n          translateY: interpolate(\n            translationY.value,\n            [HEADER_OFFSET + AVATAR_SIZE_SMALL, HEADER_OFFSET + AVATAR_SIZE_SMALL + 20],\n            [20, 0],\n            { extrapolateLeft: Extrapolation.CLAMP, extrapolateRight: Extrapolation.CLAMP }\n          ),\n        },\n      ],\n    }\n  })\n\n  const headerOverlayStyle = useAnimatedStyle(() => {\n    return {\n      opacity:\n        Platform.OS !== 'web'\n          ? 0\n          : interpolate(\n              translationY.value,\n              [HEADER_OFFSET + AVATAR_SIZE_SMALL, HEADER_OFFSET + AVATAR_SIZE_SMALL + 20],\n              [0, 0.7],\n              { extrapolateRight: Extrapolation.CLAMP }\n            ),\n    }\n  })\n\n  return (\n    <>\n      <Animated.View style={[styles.header, headerStyle]}>\n        <Image alt=\"cover\" source={IMAGES.cover} flex={1} resizeMode=\"cover\" />\n\n        <Animated.View style={[styles.headerOverlay, { backgroundColor }, headerOverlayStyle]} />\n\n        <AnimatedBlurView\n          style={[styles.blurView, { paddingTop: insets.top }]}\n          tint={colorMode || undefined}\n          animatedProps={blurViewProps}>\n          <Animated.View style={headerContentStyle}>\n            <Box flexDirection=\"row\" alignItems=\"center\">\n              <Avatar source={IMAGES.avatar} size=\"md\" />\n              <Box ml={2}>\n                <Text textAlign=\"center\" fontWeight={800}>\n                  Guillaume Martinez\n                </Text>\n                <Text textAlign=\"center\" fontSize={12}>\n                  @martinezguillaume\n                </Text>\n              </Box>\n            </Box>\n          </Animated.View>\n        </AnimatedBlurView>\n      </Animated.View>\n\n      <Animated.ScrollView\n        onScroll={scrollHandler}\n        scrollEventThrottle={1}\n        {...props}\n        style={[styles.scrollView, { marginTop: smallHeaderHeight }, props.style]}\n        contentContainerStyle={[\n          { paddingTop: HEADER_OFFSET + (AVATAR_SIZE - AVATAR_OFFSET) },\n          props.contentContainerStyle,\n        ]}>\n        <Animated.Image\n          source={IMAGES.avatar}\n          style={[styles.avatar, { borderColor: backgroundColor }, avatarStyle]}\n        />\n        {children}\n      </Animated.ScrollView>\n    </>\n  )\n})\n\nconst styles = StyleSheet.create({\n  blurView: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  headerOverlay: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  header: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    width: '100%',\n    zIndex: 2,\n  },\n  avatar: {\n    borderRadius: AVATAR_SIZE,\n    position: 'absolute',\n    top: HEADER_OFFSET - AVATAR_OFFSET,\n    borderWidth: 4,\n  },\n  scrollView: {\n    zIndex: 4,\n  },\n})\n","import { NativeStackScreenProps } from '@react-navigation/native-stack'\nimport { t } from 'i18n-js'\nimport { Box, Fab, Icon, Row, Text, useColorMode } from 'native-base'\nimport { FC, useMemo } from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Feather } from '@native-base/icons'\n\nimport { HomeScrollView } from '~/components'\nimport { RootStackParamList } from '~/types'\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'Home'>\n\nexport const HomeScreen: FC<Props> = () => {\n  const { toggleColorMode } = useColorMode()\n\n  const data = useMemo<{ description?: string; icon: string; link?: boolean }[]>(\n    () => [\n      {\n        icon: 'map-pin',\n        description: t('home.locationDescription'),\n      },\n      {\n        icon: 'gift',\n        description: t('home.birthdayDescription'),\n      },\n      {\n        icon: 'link',\n        link: true,\n        description: 'martinezguillaume.github.com',\n      },\n      {\n        icon: 'calendar',\n        description: t('home.developerDescription'),\n      },\n    ],\n    []\n  )\n\n  return (\n    <Box height=\"100%\" maxW={500} alignSelf=\"center\">\n      <HomeScrollView contentContainerStyle={styles.scrollViewContent}>\n        <Text fontSize={16} fontWeight={800}>\n          Guillaume Martinez\n        </Text>\n        <Text color=\"muted.500\">@martinezguillaume</Text>\n\n        <Text mt={4}>{t('home.description')}</Text>\n\n        <Row flexDirection=\"row\" flexWrap=\"wrap\" mt={2} space={2}>\n          {data.map((item) => (\n            <Text key={item.icon} fontSize={12} ml={1} mt={2} color=\"muted.500\">\n              <Icon color=\"muted.500\" size=\"4\" as={Feather} name={item.icon} /> {item.description}\n            </Text>\n          ))}\n        </Row>\n        <Box height={3000} />\n      </HomeScrollView>\n      <Fab onPress={toggleColorMode} />\n    </Box>\n  )\n}\n\nconst styles = StyleSheet.create({\n  scrollViewContent: {\n    paddingHorizontal: 16,\n  },\n})\n","import { createNativeStackNavigator } from '@react-navigation/native-stack'\n\nimport { HomeScreen } from '~/screens'\nimport { RootStackParamList } from '~/types'\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>()\n\nexport const RootNavigator = () => (\n  <RootStack.Navigator screenOptions={{ headerShown: false }}>\n    <RootStack.Screen name=\"Home\" component={HomeScreen} />\n  </RootStack.Navigator>\n)\n","import {\n  DarkTheme,\n  DefaultTheme,\n  NavigationContainer,\n} from \"@react-navigation/native\";\nimport { useColorMode } from \"native-base\";\nimport { RootNavigator } from \"./RootNavigator\";\n\nexport const Navigation = () => {\n  const { colorMode } = useColorMode();\n\n  return (\n    <NavigationContainer\n      theme={colorMode === \"light\" ? DefaultTheme : DarkTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n};\n","import { INativebaseConfig, NativeBaseProvider, StorageManager } from 'native-base'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport i18n from 'i18n-js'\nimport * as Localization from 'expo-localization'\nimport { Asset } from 'expo-asset'\nimport { useCallback, useState } from 'react'\nimport AppLoading from 'expo-app-loading'\n\nimport { Navigation } from './navigation'\nimport en from './locales/en.json'\nimport fr from './locales/fr.json'\nimport { IMAGES } from './assets'\n\n// Localization config\n/* eslint-disable import/no-named-as-default-member */\ni18n.translations = {\n  en,\n  fr,\n}\ni18n.locale = Localization.locale.substring(0, 2)\ni18n.fallbacks = 'en'\n/* eslint-enable import/no-named-as-default-member */\n\n// Native Base config\nconst colorModeManager: StorageManager = {\n  get: async () => {\n    try {\n      const val = await AsyncStorage.getItem('@color-mode')\n      return val === 'dark' ? 'dark' : 'light'\n    } catch (e) {\n      return 'dark'\n    }\n  },\n  set: async (value) => {\n    try {\n      if (value) {\n        await AsyncStorage.setItem('@color-mode', value)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  },\n}\nconst config: INativebaseConfig = {\n  strictMode: 'error',\n}\n\nexport default function App() {\n  const [isReady, setIsReady] = useState(false)\n\n  const loadAssets = useCallback(async () => {\n    const cacheImages = Object.values(IMAGES).map((image) => {\n      return Asset.fromModule(image).downloadAsync()\n    })\n\n    await Promise.all([cacheImages])\n  }, [])\n\n  if (!isReady) {\n    return (\n      <AppLoading\n        startAsync={loadAssets}\n        onFinish={() => setIsReady(true)}\n        onError={console.warn}\n      />\n    )\n  }\n\n  return (\n    <NativeBaseProvider colorModeManager={colorModeManager} config={config}>\n      <Navigation />\n    </NativeBaseProvider>\n  )\n}\n","module.exports = __webpack_public_path__ + \"static/media/cover.c04689f5.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.474e7780.jpg\";"],"sourceRoot":""}